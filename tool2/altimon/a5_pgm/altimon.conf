#########################################
## Connection Group
#########################################
<CONNECTION_INFO>
    <DB_IP>        127.0.0.1 </DB_IP>
    <SYS_PASSWD>   manager     </SYS_PASSWD>
    <PORT_NO>      20300       </PORT_NO>
    <NLS_USE>      KO16KSC5601    </NLS_USE>
</CONNECTION_INFO>


#########################################
## REPOSITORY PROPERTY
#########################################
<REPOSITORY_INFO>
    <SITE_NAME> v880        </SITE_NAME> # 여러 altimon 간의 해당 서버를 구분할 고유의 alias
    <DURATION> 30           </DURATION>  # 데이터 유지기간 (일단위)
    <DB_IP>    127.0.0.1    </DB_IP>     # DB Server IP for repository
    <PORT_NO>  20300        </PORT_NO>   # DB port for repository
    <NLS_USE>  KO16KSC5601  </NLS_USE>   # DB nls_use for repository
    <USER>     SYS          </USER>      # DB user for repository ( recomand create user 'altimon')
    <PASSWD>   MANAGER      </PASSWD>
</REPOSITORY_INFO>

#########################################
## ALTIMON PROPERTY
#########################################
<ALTIMON_PROPERTY>
    <DATE_FORMAT>   1    </DATE_FORMAT> # 1. yyyy-mm-dd hh:mi:ss   2. mm-dd hh:mi:ss   3. hh:mi:ss
    <SLEEP_TIME>    300  </SLEEP_TIME>
    <LOG_FILE>      /home/alti2/altimon/log/altimon.log </LOG_FILE>
    <ALARM_FILE>    /home/alti2/altimon/log/alarm.log   </ALARM_FILE>
    <DB_SAVE>       OFF   </DB_SAVE>
    <LISTEN_PORT>   22300 </LISTEN_PORT> 
</ALTIMON_PROPERTY>



#########################################
## PROCESS CHECK PROPERTY
#########################################
<OS_QUERY_GROUP_SET>
    <CPU_USAGE> 80 </CPU_USAGE>
    <CPU_ACT> 
       is -silent -f $HOME/altimon/ACTION_SCRIPT/cpu_act.sql -o $HOME/altimon/ACTION_LOG/cpu_act.log.`date +%Y%m%d_%H%M%S` 
    </CPU_ACT>
    <MEM_USAGE> 7000000 </MEM_USAGE>
    <MEM_ACT> 
       is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S` 
    </MEM_ACT> 
    <DISK_CHK_ENABLE> ON </DISK_CHK_ENABLE>
    <DISK1>  /home  </DISK1>
    <DISK1_USAGE> 90 </DISK1_USAGE>
    <DISK2>  /data2  </DISK2>
    <DISK2_USAGE> 90 </DISK2_USAGE>
    <DISK3>  /data7  </DISK3>
    <DISK3_USAGE> 90 </DISK3_USAGE>
    <DISK4>  /data8  </DISK4>
    <DISK4_USAGE> 90 </DISK4_USAGE>
    <DISK_ACT> 
    </DISK_ACT> 
</OS_QUERY_GROUP_SET>


#########################################
## Monitoring query
#########################################
<MONITOR_QUERY_GROUP_SET>
    <LOGFILE_COUNT> 
        <QUERY>
             select  (select OLDEST_LOGFILE_NO from v$log) as old_log,
                     (select current_logfile from v$archive) as curr_log,
                    ((select current_logfile from v$archive) - (select OLDEST_LOGFILE_NO from v$log)) as log_gap
             from dual
        </QUERY>
        <DISPLAY>      1     </DISPLAY>
        <CHECKNAME> log_gap  </CHECKNAME>
        <CHECKVALUE>   500   </CHECKVALUE>
        <COMPARE>      G     </COMPARE>
        <ENABLE>       ON    </ENABLE>
        <ACTION> 
            is -silent -f $HOME/altimon/ACTION_SCRIPT/logfile_act.sql -o $HOME/altimon/ACTION_LOG/logfile_act.log.`date +%Y%m%d_%H%M%S` 
        </ACTION> 
    </LOGFILE_COUNT>

    <MEMSTAT_SUM>
        <QUERY>
             select trunc(sum(MAX_TOTAL_SIZE)/1024/1024, 2) as max_total_mb,  
                    trunc(sum(ALLOC_SIZE)/1024/1024, 2) as current_mb 
             from v$memstat
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <CHECKNAME>   max_total_mb  </CHECKNAME>
        <CHECKVALUE>    7000    </CHECKVALUE>
        <COMPARE>       G        </COMPARE>
        <ENABLE>        ON       </ENABLE>
#        <ACTION> 
#           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
#        </ACTION>
    </MEMSTAT_SUM>

    <MEMSTAT_SUM_4370>
        <QUERY>
             select trunc(sum(ALLOC_SIZE)/1024/1024, 2) as current_mb 
             from v$memstat
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <CHECKNAME>   current_mb  </CHECKNAME>
        <CHECKVALUE>    10240    </CHECKVALUE>
        <COMPARE>       G        </COMPARE>
        <ENABLE>        OFF      </ENABLE>
        <ACTION> 
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEMSTAT_SUM_4370>

    <MEM_DATABASE_USAGE>
        <QUERY>
               select 
                  trunc(mem_alloc_page_count*32/1024, 2) as alloc_mem_mb,
                  trunc(mem_free_page_count*32/1024, 2) as free_mem_mb
               from v$database
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <CHECKNAME>    alloc_mem_mb        </CHECKNAME>
        <CHECKVALUE>   8000                </CHECKVALUE>
        <COMPARE>      G                   </COMPARE>
        <ENABLE>       ON                  </ENABLE>
#        <ACTION>
#           is -silent -f $HOME/altimon/ACTION_SCRIPT/db_usage.sql -o $HOME/altimon/ACTION_LOG/db_usage.log.`date +%Y%m%d_%H%M%S`
#        </ACTION>
    </MEM_DATABASE_USAGE>

    <MEM_DATABASE_USAGE_4370>
        <QUERY>
               select 
                  trunc(mem_alloc_page_count*8192/1024/1024, 2) as alloc_mem_mb,
                  trunc(mem_free_page_count*8192/1024/1024, 2) as free_mem_mb
               from v$database
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <CHECKNAME>    alloc_mem_mb        </CHECKNAME>
        <CHECKVALUE>   7000                </CHECKVALUE>
        <COMPARE>      G                   </COMPARE>
        <ENABLE>       OFF                  </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/db_usage.sql -o $HOME/altimon/ACTION_LOG/db_usage.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_DATABASE_USAGE_4370>

    <MEM_TBL_USAGE>
        <QUERY>
               select 
                  trunc(sum(fixed_alloc_mem+var_alloc_mem)/1024/1024,2) as alloc_mem_mb,
                  trunc(sum(fixed_used_mem+var_used_mem)/1024/1024,2) as used_mem_mb
               from v$memtbl_info
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    alloc_mem_mb    </CHECKNAME>
        <CHECKVALUE>   4096  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON         </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_TBL_USAGE>

    <TABLESPACE_USAGE>
        <QUERY>
           SELECT A.NAME, MAXSZ AS 'MAX(M)', ALLOC 'ALLOC(M)', NVL(USED, 0) AS 'USED(M)', ROUND(NVL(USED, 0)/MAXSZ * 100,2)  AS 'USAGE(%)'
           FROM V$TABLESPACES A,
               (SELECT B.ID TBS_ID, ROUND(SUM(CASE2(MAXSIZE=0,CURRSIZE,MAXSIZE))*8*1024/1024/1024) MAXSZ,
                        ROUND(SUM(CURRSIZE)*8*1024/1024/1024) ALLOC
                 FROM V$DATAFILES A, V$TABLESPACES B
                 WHERE A.SPACEID = B.ID AND B.NAME != 'SYS_TBS_DISK_UNDO'
                 GROUP BY B.ID) B LEFT OUTER JOIN
                (SELECT A.ID TBS_ID, ROUND(SUM(EXTENT_TOTAL_COUNT)*256*1024/1024/1024) USED
                 FROM V$TABLESPACES A, V$SEGMENT B 
                 WHERE A.ID=B.SPACE_ID GROUP BY A.ID) C ON B.TBS_ID = C.TBS_ID
           WHERE A.ID = B.TBS_ID
           UNION ALL
           SELECT B.NAME, MAXSZ AS 'MAX(M)', ALLOC 'ALLOC(M)', USED AS 'USED(M)', 
                  ROUND(USED/MAXSZ * 100,2)  AS 'USAGE(%)'
           FROM (SELECT B.ID TBS_ID, ROUND(SUM(CASE2(MAXSIZE=0,CURRSIZE,MAXSIZE))*8*1024/1024/1024) MAXSZ,
                        ROUND(SUM(CURRSIZE)*8*1024/1024/1024) ALLOC
                 FROM V$DATAFILES A, V$TABLESPACES B
                 WHERE A.SPACEID = B.ID AND B.NAME = 'SYS_TBS_DISK_UNDO'
                 GROUP BY B.ID) A,
                V$TABLESPACES B LEFT OUTER JOIN
                (SELECT 'SYS_TBS_DISK_UNDO' AS NAME, ROUND((SUM(TOTAL_PAGE_COUNT)-SUM(FREE_PAGE_COUNT))*8*1024/1024/1024) USED
                 FROM V$UNDO_SEG) C ON B.NAME = C.NAME
           WHERE A.TBS_ID = B.ID
        </QUERY>
        <DISPLAY> 1                  </DISPLAY>
        <CHECKNAME>    USAGE(%)  </CHECKNAME>
        <CHECKVALUE>   80          </CHECKVALUE>
        <COMPARE>      G             </COMPARE>
        <ENABLE> ON </ENABLE>
    </TABLESPACE_USAGE>

    <SEGMENT_USAGE>
        <QUERY>
           select name, sum(EXTENT_TOTAL_COUNT)*256 as 'usage(M)' 
           from v$tablespaces a,  V$SEGMENT b 
           where a.id=b.space_id 
           group by name 
           ORDER BY name;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> OFF </ENABLE>
    </SEGMENT_USAGE>

    <UNDO_USAGE>
        <QUERY>
           select sum(total_page_count), sum(free_page_count), (sum(free_page_count)/sum(total_page_count))*100, sum(EXTENT_TOTAL_COUNT)*256 as 'usage(M)' 
           from v$tablespaces a,  V$SEGMENT b 
           where a.id=b.space_id 
           group by name 
           ORDER BY name;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> OFF </ENABLE>
    </UNDO_USAGE>

    <DISK_TBL_USAGE>
        <QUERY>
               select name, round(sum(DISK_TOTAL_PAGE_CNT)*8/1024) AS 'USED(M)' 
               from v$disktbl_info a, v$tablespaces b 
               where a.TABLESPACE_ID=b.id group by name
               order by name
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <ENABLE>       ON         </ENABLE>
    </DISK_TBL_USAGE>

    <TABLE_USAGE>
        <QUERY>
               select
                  table_name,
                  FIXED_ALLOC_MEM+VAR_ALLOC_MEM alloc,
                  (FIXED_ALLOC_MEM+VAR_ALLOC_MEM)-(FIXED_USED_MEM+VAR_USED_MEM) free
               from system_.sys_tables_ a, v$memtbl_info b
               where a.table_oid = b.table_oid
               order by 2;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   1  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </TABLE_USAGE>

    <SERVICE_THREAD_MODE>
        <QUERY>
        select run_mode, count(*) cnt from V$service_thread group by run_mode order by 1;
        </QUERY>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </SERVICE_THREAD_MODE>

    <SERVICE_THREAD_STATE>
        <QUERY>
        select state, count(*) cnt from V$service_thread group by state order by 1;
        </QUERY>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </SERVICE_THREAD_STATE>

    <SESSION_COUNT>
        <QUERY> select count(*) as sid_count from v$session </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    sid_count   </CHECKNAME>
        <CHECKVALUE>   100           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON </ENABLE>
        <ACTION>
        </ACTION>
    </SESSION_COUNT>

    <STATEMENT_COUNT>
        <QUERY> select count(*) as stmt_count from v$statement </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    stmt_count   </CHECKNAME>
        <CHECKVALUE>   2000           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE> ON </ENABLE>
        <ACTION>
        </ACTION>
    </STATEMENT_COUNT>

    <MEM_GC>
        <QUERY>
               select
                  gc_name,
               -- MINMEMSCNINTXS-SCNOFTAIL,
                  ADD_OID_CNT-GC_OID_CNT gc_gap
               from v$memgc;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    gc_gap    </CHECKNAME>
        <CHECKVALUE>   1000  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON         </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_GC>

    <DISK_GC>
        <QUERY>
               select
                  gc_name,
               -- MINMEMSCNINTXS-SCNOFTAIL,
                  ADD_TSS_CNT-GC_TSS_CNT gc_gap
               from v$diskgc;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    gc_gap    </CHECKNAME>
        <CHECKVALUE>   100000  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       ON         </ENABLE>
#        <ACTION>
#           is -silent -f $HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
#        </ACTION>
    </DISK_GC>

    <BUFFER_STAT>
        <QUERY>
            select victim_fails,READ_PAGES from v$buffpool_stat;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </BUFFER_STAT>

    <LOCK_DESC>
        <QUERY>
            select b.session_id as sid, 
                   b.tx_id as tId, 
                   b.is_grant as isgran,
                   b.lock_desc as Ldesc, 
                   a.table_name as ltable,
                   trunc(c.total_time/1000000, 4) as TTime
            from system_.sys_tables_ a, v$lock_statement b, v$statement c
            where a.table_oid = b.table_oid
              and   c.session_id = b.session_id
              and   c.tx_id      = b.tx_id
              and   (c.total_time/1000000) > 1
            group by b.session_id, b.tx_id, b.is_grant, total_time, a.table_name, b.lock_desc 
            order by b.session_id, b.tx_id, b.is_grant, total_time, a.table_name, b.lock_desc  
            --order by b.tx_id, b.table_oid, b.is_grant, c.total_time
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </LOCK_DESC>

    <LONG_RUN_QUERY>
        <QUERY>
               select to_char(sysdate, 'YYYY/MM/DD HH:MI:SS') cur_time,
                      start_time,
                      session_id sid,
                      comm_name ip,
                      client_pid pid,
                      stmt_id,
                      tx_id,
                      active_flag,
                      execute_flag,
                      begin_flag,
                      trunc(execute_time/1000000,2) rtime,
                      trunc(fetch_time/1000000,2) ftime,
                      trunc(total_time/1000000,2) ttime,
                      query
               from ( select CASE2(LAST_QUERY_START_TIME = 0, '1970/01/01 12:00:00',
                       TO_CHAR(TO_DATE('1970010109','YYYYMMDDHH') +
                       LAST_QUERY_START_TIME/60/60/24 , 'YYYY/MM/DD HH:MI:SS')) as start_time,
                             session_id,
                             id as stmt_id,
                             tx_id,
                             execute_time,
                             fetch_time,
                             total_time,
                             execute_flag,
                             begin_flag,
                             query
                      FROM v$statement) a, v$session b
               where a.session_id = b.id
                 and query not like '%LAST_QUERY_START_TIME%'
                 and total_time/1000000 > 1
                 --and (sysdate - to_date(start_time, 'YYYY/MM/DD HH:MI:SS'))*24*60*60 >= total_time
                 and IDLE_START_TIME = 0
                 and CURRENT_STMT_ID = stmt_id
               order by ttime desc;
        </QUERY>
        <DISPLAY>    1   </DISPLAY>
        <ENABLE>     ON  </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/long_query.sql -o $HOME/altimon/ACTION_LOG/long_query.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </LONG_RUN_QUERY>

    <UTRANS_QUERY>
        <QUERY>
            select 
                  st.session_id as sid,
                  ss.comm_name as ip,
                  ss.CLIENT_PID as pid,
                  st.id as stmt_id, 
                  base_time - tr.FIRST_UPDATE_TIME as utrans_time
                  from V$TRANSACTION tr, v$statement st, v$session ss, V$SESSIONMGR
                  where tr.id = st.tx_id 
                  and st.session_id = ss.id
                  and tr.FIRST_UPDATE_TIME != 0
                  and (base_time - tr.FIRST_UPDATE_TIME) > 60
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </UTRANS_QUERY>

    <REPLICATION_GAP>
        <QUERY>
        select rep_name, rep_gap from v$repgap group by rep_name, rep_gap limit 1 
        </QUERY>
        <CHECKNAME>   rep_gap   </CHECKNAME>
        <CHECKVALUE>  100000 </CHECKVALUE>
        <COMPARE>     G         </COMPARE>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON        </ENABLE>
        <ACTION>
           is -silent -f $HOME/altimon/ACTION_SCRIPT/rep_act.sql -o $HOME/altimon/ACTION_LOG/rep_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </REPLICATION_GAP>

    <REPLICATION_SENDER>
        <QUERY>
        select count(*) as rep_sender from V$REPSENDER 
        </QUERY>
        <CHECKNAME>   rep_sender   </CHECKNAME>
        <CHECKVALUE>  2          </CHECKVALUE>
        <COMPARE>     L         </COMPARE>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON        </ENABLE>
    </REPLICATION_SENDER>

    <REPLICATION_RECEIVER>
        <QUERY>
        select count(*) as rep_receiver from V$REPRECEIVER
        </QUERY>
        <CHECKNAME>   rep_receiver   </CHECKNAME>
        <CHECKVALUE>  2          </CHECKVALUE>
        <COMPARE>     L         </COMPARE>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </REPLICATION_RECEIVER>

    <REPLICATION_MON>
        <QUERY>
select
     a.replication_name rep_name,
     decode(b.peer_port, NULL, 'OFF', 'ON') as sender_stat,
     d.host_ip || decode(d.host_ip, trim(b.peer_ip), ' (*)', NULL) peer_ip,
     decode(c.peer_port, NULL, 'OFF', 'ON') as receiver_stat,
     nvl(to_char(e.rep_gap), 'n/a') as rep_gap
from
     system_.sys_repl_hosts_ d ,
     system_.sys_replications_ a
     left outer join v$repsender b
         on a.replication_name = trim(b.rep_name)
     left outer join v$repreceiver c
         on a.replication_name = trim(c.rep_name)
     left outer join
     (
       select rep_name, max(rep_gap) rep_gap from v$repgap
       group by rep_name
     ) e
         on a.replication_name = trim(e.rep_name)
where
      a.replication_name = d.replication_name
order by rep_name
;
        </QUERY>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </REPLICATION_MON>

</MONITOR_QUERY_GROUP_SET>
